import { Order } from "@/types/order";
import { SaleItem } from "@/types/product";

/**
 * ‚úÖ EXTRACT METHOD: Gera o HTML para impress√£o de um item do pedido
 * Responsabilidade: Formata√ß√£o de um item individual
 */
function formatOrderItem(item: SaleItem): string {
  const optionsHtml = item.selectedOptions
    ? `
      ${item.selectedOptions.frutas.length > 0 ? `<div style="font-size: 0.875rem;">Frutas: ${item.selectedOptions.frutas.join(", ")}</div>` : ""}
      ${item.selectedOptions.cremes.length > 0 ? `<div style="font-size: 0.875rem;">Cremes: ${item.selectedOptions.cremes.join(", ")}</div>` : ""}
      ${item.selectedOptions.acompanhamentos.length > 0 ? `<div style="font-size: 0.875rem;">Acomp: ${item.selectedOptions.acompanhamentos.join(", ")}</div>` : ""}
    `
    : "";

  const addonsHtml = item.addons?.length
    ? `<div style="font-size: 0.875rem;">Adicionais: ${item.addons.map((addon) => addon.name).join(", ")}</div>`
    : "";

  const quantity =
    item.product.type === "weight" ? `${item.weight}g` : item.quantity || 1;

  return `
    <tr>
      <td>
        ${item.product.name}
        ${optionsHtml}
        ${addonsHtml}
      </td>
      <td style="text-align: right;">${quantity}</td>
    </tr>
  `;
}

/**
 * ‚úÖ EXTRACT METHOD: Gera a tabela de itens do pedido
 * Responsabilidade: Formata√ß√£o da tabela completa de itens
 */
function generateOrderItemsTable(items: SaleItem[]): string {
  const itemsHtml = items.map(formatOrderItem).join("");

  return `
    <table style="width: 100%; border-top: 1px solid #000; border-bottom: 1px solid #000; padding: 0.5rem 0;">
      <tr>
        <th style="text-align: left;">Item</th>
        <th style="text-align: right;">Qtd</th>
      </tr>
      ${itemsHtml}
    </table>
  `;
}

/**
 * ‚úÖ EXTRACT METHOD: Gera o cabe√ßalho do pedido
 * Responsabilidade: Formata√ß√£o do cabe√ßalho com informa√ß√µes b√°sicas
 */
function generateOrderHeader(orderId: string): string {
  return `
    <div style="text-align: center; margin-bottom: 1rem;">
      <h1 style="font-size: 1.25rem; font-weight: bold;">MUNDO GELADO</h1>
      <p>PEDIDO #${orderId.slice(-4)}</p>
      <p>${new Date().toLocaleString()}</p>
    </div>
  `;
}

/**
 * ‚úÖ EXTRACT METHOD: Gera a se√ß√£o de informa√ß√µes do cliente
 * Responsabilidade: Formata√ß√£o das informa√ß√µes do cliente
 */
function generateCustomerInfo(customerName: string): string {
  return `
    <div style="margin-bottom: 1rem;">
      <p>Cliente: ${customerName}</p>
    </div>
  `;
}

/**
 * ‚úÖ EXTRACT METHOD: Gera o rodap√© do pedido
 * Responsabilidade: Formata√ß√£o do rodap√©
 */
function generateOrderFooter(): string {
  return `
    <div style="text-align: center; margin-top: 1rem;">
      <p>*** FIM DO PEDIDO ***</p>
    </div>
  `;
}

/**
 * ‚úÖ EXTRACT METHOD: Gera o CSS para impress√£o
 * Responsabilidade: Configura√ß√£o de estilos para impress√£o
 */
function generatePrintStyles(): string {
  return `
    <style>
      @media print { 
        body * { visibility: visible; } 
        @page { margin: 0; size: 80mm auto; } 
      }
    </style>
  `;
}

/**
 * ‚úÖ FUN√á√ÉO PRINCIPAL: Gera o template HTML completo para impress√£o do pedido
 * Responsabilidade: Orquestrar a gera√ß√£o do template completo
 *
 * BENEF√çCIOS:
 * - Fun√ß√£o pura e test√°vel
 * - Reutiliz√°vel em diferentes contextos
 * - F√°cil de manter e estender
 * - Separa√ß√£o clara de responsabilidades
 */
export function generateOrderPrintTemplate(order: Order): string {
  const header = generateOrderHeader(order.id);
  const customerInfo = generateCustomerInfo(order.customerName);
  const itemsTable = generateOrderItemsTable(order.items);
  const footer = generateOrderFooter();
  const styles = generatePrintStyles();

  return `
    <html>
      <head>
        <title>Pedido #${order.id.slice(-4)}</title>
        ${styles}
      </head>
      <body>
        ${header}
        ${customerInfo}
        ${itemsTable}
        ${footer}
      </body>
    </html>
  `;
}

/**
 * ‚úÖ EXTRACT METHOD: Abre uma nova janela e imprime o conte√∫do HTML
 * Responsabilidade: Gerenciamento da janela de impress√£o
 *
 * BENEF√çCIOS:
 * - Tratamento de erro isolado
 * - Fun√ß√£o reutiliz√°vel para qualquer conte√∫do HTML
 * - F√°cil de testar com mocking
 */
export function printHtmlContent(htmlContent: string): void {
  const printWindow = window.open("", "_blank");

  if (!printWindow) {
    console.error("N√£o foi poss√≠vel abrir a janela de impress√£o");
    return;
  }

  printWindow.document.write(htmlContent);
  printWindow.document.close();
  printWindow.focus();
  printWindow.print();
  printWindow.close();
}

/*
ARQUITETURA DA SOLU√á√ÉO:

1. üéØ SINGLE RESPONSIBILITY PRINCIPLE
   Cada fun√ß√£o tem uma responsabilidade espec√≠fica e bem definida

2. üîß EXTRACT METHOD PATTERN
   Fun√ß√£o longa dividida em m√∫ltiplas fun√ß√µes menores e especializadas

3. üß™ TESTABILIDADE
   - Fun√ß√µes puras (generateOrderPrintTemplate)
   - Depend√™ncias isoladas (printHtmlContent)
   - F√°cil mocking e stubbing

4. üîÑ REUTILIZA√á√ÉO
   - Utilit√°rio pode ser usado em outros contextos
   - Fun√ß√µes modulares e configur√°veis
   - Template extens√≠vel

5. üõ†Ô∏è MANUTENIBILIDADE
   - C√≥digo leg√≠vel e bem documentado
   - Mudan√ßas isoladas em fun√ß√µes espec√≠ficas
   - Debugging simplificado

6. üìà EXTENSIBILIDADE
   - F√°cil adi√ß√£o de novos tipos de impress√£o
   - Personaliza√ß√£o de templates
   - Suporte a diferentes formatos
*/
